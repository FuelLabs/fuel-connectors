export const predicates = {
  'verification-predicate': {
    abi: {
      encoding: '1',
      types: [
        {
          typeId: 0,
          type: 'b256',
          components: null,
          typeParameters: null,
        },
        {
          typeId: 1,
          type: 'bool',
          components: null,
          typeParameters: null,
        },
        {
          typeId: 2,
          type: 'u64',
          components: null,
          typeParameters: null,
        },
      ],
      functions: [
        {
          inputs: [
            {
              name: 'witness_index',
              type: 2,
              typeArguments: null,
            },
          ],
          name: 'main',
          output: {
            name: '',
            type: 1,
            typeArguments: null,
          },
          attributes: null,
        },
      ],
      loggedTypes: [],
      messagesTypes: [],
      configurables: [
        {
          name: 'SIGNER',
          configurableType: {
            name: '',
            type: 0,
            typeArguments: null,
          },
          offset: 2232,
        },
      ],
    },
    bytecode: base64ToUint8Array(
      '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',
    ),
  },
};

function base64ToUint8Array(base64: string) {
  const binaryString = atob(base64);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes;
}
