export const predicate = {
  abi: {
    types: [
      {
        typeId: 0,
        type: 'b256',
        components: null,
        typeParameters: null,
      },
      {
        typeId: 1,
        type: 'bool',
        components: null,
        typeParameters: null,
      },
      {
        typeId: 2,
        type: 'struct EvmAddress',
        components: [
          {
            name: 'value',
            type: 0,
            typeArguments: null,
          },
        ],
        typeParameters: null,
      },
      {
        typeId: 3,
        type: 'u64',
        components: null,
        typeParameters: null,
      },
    ],
    functions: [
      {
        inputs: [
          {
            name: 'witness_index',
            type: 3,
            typeArguments: null,
          },
        ],
        name: 'main',
        output: {
          name: '',
          type: 1,
          typeArguments: null,
        },
        attributes: null,
      },
    ],
    loggedTypes: [],
    messagesTypes: [],
    configurables: [
      {
        name: 'SIGNER',
        configurableType: {
          name: '',
          type: 2,
          typeArguments: [],
        },
        offset: 2280,
      },
    ],
  },
  bytecode: base64ToUint8Array(
    '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',
  ),
};

function base64ToUint8Array(base64: string) {
  const binaryString = atob(base64);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes;
}
