export const predicate = {
  abi: {
    types: [
      {
        typeId: 0,
        type: 'b256',
        components: null,
        typeParameters: null,
      },
      {
        typeId: 1,
        type: 'bool',
        components: null,
        typeParameters: null,
      },
      {
        typeId: 2,
        type: 'struct EvmAddress',
        components: [
          {
            name: 'value',
            type: 0,
            typeArguments: null,
          },
        ],
        typeParameters: null,
      },
      {
        typeId: 3,
        type: 'u64',
        components: null,
        typeParameters: null,
      },
    ],
    functions: [
      {
        inputs: [
          {
            name: 'witness_index',
            type: 3,
            typeArguments: null,
          },
        ],
        name: 'main',
        output: {
          name: '',
          type: 1,
          typeArguments: null,
        },
        attributes: null,
      },
    ],
    loggedTypes: [],
    messagesTypes: [],
    configurables: [
      {
        name: 'SIGNER',
        configurableType: {
          name: '',
          type: 2,
          typeArguments: [],
        },
        offset: 2136,
      },
    ],
  },
  bytecode: base64ToUint8Array(
    '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',
  ),
};

function base64ToUint8Array(base64: string) {
  const binaryString = atob(base64);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes;
}
