/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import type {
  BN,
  BigNumberish,
  Bytes,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
  StdString,
} from 'fuels';

import type { Enum, Option } from './common';

export enum AmountErrorInput {
  AmountMismatch = 'AmountMismatch',
}
export enum AmountErrorOutput {
  AmountMismatch = 'AmountMismatch',
}
export enum BurnErrorInput {
  NotEnoughCoins = 'NotEnoughCoins',
}
export enum BurnErrorOutput {
  NotEnoughCoins = 'NotEnoughCoins',
}
export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;
export enum MintErrorInput {
  MaxMinted = 'MaxMinted',
}
export enum MintErrorOutput {
  MaxMinted = 'MaxMinted',
}
export enum SetErrorInput {
  ValueAlreadySet = 'ValueAlreadySet',
}
export enum SetErrorOutput {
  ValueAlreadySet = 'ValueAlreadySet',
}

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type NativeAssetContractAbiConfigurables = Partial<{
  MAX_SUPPLY: BigNumberish;
}>;

export interface NativeAssetContractAbiInterface extends Interface {
  functions: {
    decimals: FunctionFragment;
    name: FunctionFragment;
    symbol: FunctionFragment;
    total_assets: FunctionFragment;
    total_supply: FunctionFragment;
    burn: FunctionFragment;
    mint: FunctionFragment;
    set_decimals: FunctionFragment;
    set_name: FunctionFragment;
    set_symbol: FunctionFragment;
  };
}

export class NativeAssetContractAbi extends Contract {
  interface: NativeAssetContractAbiInterface;
  functions: {
    decimals: InvokeFunction<[asset: AssetIdInput], Option<number>>;
    name: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    symbol: InvokeFunction<[asset: AssetIdInput], Option<StdString>>;
    total_assets: InvokeFunction<[], BN>;
    total_supply: InvokeFunction<[asset: AssetIdInput], Option<BN>>;
    burn: InvokeFunction<[sub_id: string, amount: BigNumberish], void>;
    mint: InvokeFunction<
      [recipient: IdentityInput, sub_id: string, amount: BigNumberish],
      void
    >;
    set_decimals: InvokeFunction<
      [asset: AssetIdInput, decimals: BigNumberish],
      void
    >;
    set_name: InvokeFunction<[asset: AssetIdInput, name: StdString], void>;
    set_symbol: InvokeFunction<[asset: AssetIdInput, symbol: StdString], void>;
  };
}
