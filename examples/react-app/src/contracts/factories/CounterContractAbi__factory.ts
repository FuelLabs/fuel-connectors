/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.83.0
  Forc version: 0.56.0
  Fuel-Core version: 0.24.3
*/

import { Contract, ContractFactory, Interface } from 'fuels';
import type {
  AbstractAddress,
  Account,
  BytesLike,
  DeployContractOptions,
  Provider,
  StorageSlot,
} from 'fuels';
import type {
  CounterContractAbi,
  CounterContractAbiInterface,
} from '../CounterContractAbi';

const _abi = {
  types: [
    {
      typeId: 0,
      type: 'u64',
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: 'amount',
          type: 0,
          typeArguments: null,
        },
      ],
      name: 'decrement_counter',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['write', 'read'],
        },
      ],
    },
    {
      inputs: [],
      name: 'get_count',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
    {
      inputs: [
        {
          name: 'amount',
          type: 0,
          typeArguments: null,
        },
      ],
      name: 'increment_counter',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['write', 'read'],
        },
      ],
    },
  ],
  loggedTypes: [],
  messagesTypes: [],
  configurables: [],
};

const _storageSlots: StorageSlot[] = [
  {
    key: 'f383b0ce51358be57daa3b725fe44acdb2d880604e367199080b4379c41bb6ed',
    value: '0000000000000000000000000000000000000000000000000000000000000000',
  },
];

// biome-ignore lint/complexity/noStaticOnlyClass: generated file
export class CounterContractAbi__factory {
  static readonly abi = _abi;

  static readonly storageSlots = _storageSlots;

  static createInterface(): CounterContractAbiInterface {
    return new Interface(_abi) as unknown as CounterContractAbiInterface;
  }

  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ): CounterContractAbi {
    return new Contract(
      id,
      _abi,
      accountOrProvider,
    ) as unknown as CounterContractAbi;
  }

  static async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {},
  ): Promise<CounterContractAbi> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    const { storageSlots } = CounterContractAbi__factory;

    const contract = await factory.deployContract({
      storageSlots,
      ...options,
    });

    return contract as unknown as CounterContractAbi;
  }
}
